Version [Version Number] ([Friendly Version Number]) [Release Date]

Version vNext
	General description:
	
	Bug fixes:
	
	Code changes:
		-A new CompositeLoggingProvider added for work item 4844.
		 Some internal changes had to be made to the Logger and LoggingProviderBase to make this possible.
		 The static Logger facade checked the configured providers for circular references during 
		 initialization to prevent stack overflows when providers logged to their fallback provider. The 
		 CompositeLoggingProvider allows referencing multiple providers and it was important to be able to
		 also check these references during initialization. To achieve this, two internal virtual methods were
		 added to the LoggingProviderBase class and the circular reference checking code in the Logger class
		 was refactored and extracted to it's own class: CircularReferenceFinder.
		-A new CompositeException was added for the CompositeLoggingProvider (work item 4844).
		 The CompositeLoggingProvider can log to multiple providers and logging to other providers will
		 continue, even when a providers failed. This means that this could lead to multiple failing providers.
		 To be able to throw an exception that contains multiple inner exceptions, the new CompositeException
		 was created. Its no coincidence that this exception looks a lot like the AggregateException of
		  .NET 4.0. We can't however use AggregateException for two reasons:
		     1. .NET 4.0 is currently still in beta.
		     2. CuttingEdge.Logging must stay compatible with .NET 2.0 for some time to come.
		 By copying the AggregateException API we'll be able to let CompositeException inherit from 
		 AggregateException in a later release. This way a future version of CompositeLoggingProvider will be
		 able to throw an AggregateException while not introducing a breaking change in the library :-).


Version 1.1.5.0 (1.1.5) 2009-11-30
	General description:
		Some minor bug fixes were fixed for this release, project code was cleaned up, and unit testing library
		was almost completely rewritten. 
	
	Bug fixes:
		-When configuring an provider with no default constructor the thrown exception was not very descriptive.
		-SqlLoggingProvider and AspNetSqlLoggingProvider threw NullReferenceException (WorkItem 4763)
		-Logger threw TypeLoadException when invalid value was set in type attribute (WorkItem 4762)
		-DebugLoggingProvider did not log in release builds. (WorkItem 4721)
		 The logger called the static Trace.Write method which was marked with the ConditionalAttribute.
		-Fixed a typo in the Obsolete attribute of the LoggerWrapper class.
		-Fixed one of the exception messages that was thrown in case the logging provider failed to initialize.
		 The message incorrectly referred to an error in the <configSections> section.
	
	Code changes:
		-Several typo's in code comments and XML comments fixed.
		-A lot of refactoring done, such as:
			-Code in CuttingEdge.Logging assembly cleaned up.
			-SR (String resources) class now uses more convenient format methods instead of static fields.
			 By using methods, code coverage (NCover) can signal which resource messages aren't used.
			-Unit testing library almost completely rewritten. A lot of tests were badly named or tested too
			 much. Many tests were added to achieve better coverage percentage.
		-The Obsolete attribute on the LoggerWrapper class is now flagged as compile error. The LoggerWrapper
		 will be removed in a later release.
	
	Changes to project and solutions:
		-New project CuttingEdge.Logging.Tests.Integration added. This test project needs a SQL server database
		 to test the SqlLoggingProvider and AspNetSqlLoggingProvider.
		-Project CuttingEdge.Logging.Tests.Common added and AppDomain sand boxing classes moved to this library.
		-Project CuttingEdge.Logging.UnitTests is renamed to CuttingEdge.Logging.Tests.Unit.
		-InternalsVisibleToAttribute defined in CuttingEdge.Logging assembly (debug mode only) to allow
		 better Unit Testing.
		-'Treat warnings as errors' is now selected in project settings.
		-StyleCop.Settings file is moved to solution folder. Unit Test project overwrites some settings.
		-TRACE flag is now on in release builds
		

Version 1.1.0.0 (1.1) 2009-03-15
	General description:
		This new release fixes two bugs and adds a new provider: the MailLoggingProvider.

	Bug fixes:
		-Dependency with the type ‘System.Web.Configuration.ProvidersHelper’ removed. There were two problems
		 it’s use:
		 1. The used 'InstantiateProvider' method throws exceptions without specifying a possible inner
		    exception (see the bug report on 
		    http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=411215 for more 
		    information).
		 2. Use of the type caused the to the loading of the System.Web assembly and the check of ASP.NET 
		    hosting permissions, while the CuttingEdge.Logging framework is a general framework that could
		    also be used in non-web based environments.
		-WindowsEventLogLoggingProvider now also logs the severity of the event to the event log. Two new unit
		 tests added to check the format of that logged message.
	
	Code changes:
		-A new MailLoggingProvider has been added. It's a simple provider that uses the <system.net> 
		 configuration from the application configuration file to send events by mail.
		-A LoggerExtensions class added containing extension methods for the ILogger interface. These
		 extension method replace the LoggerWrapper class which is now marked as obsolete.
		 
	Changes to project and solutions:
		-Reference to System.Core (.NET 3.5) added. Officially, the project is now dependent on .NET 3.5, but 
		 it will still run on .NET 2.0. When adding the assembly to a .NET 2.0 project just ignore
		 the warning by choosing "Yes".


Version 1.0.0.0 (1.0) 2008-11-23
	General description:
		Initial release.