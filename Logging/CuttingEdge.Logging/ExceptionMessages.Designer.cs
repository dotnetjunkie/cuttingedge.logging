//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CuttingEdge.Logging {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ExceptionMessages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ExceptionMessages() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CuttingEdge.Logging.ExceptionMessages", typeof(ExceptionMessages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument must not be null or an empty string..
        /// </summary>
        internal static string ArgumentMustNotBeNullOrEmptyString {
            get {
                return ResourceManager.GetString("ArgumentMustNotBeNullOrEmptyString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error in the &apos;{0}&apos; section of the the configuration&apos;s &lt;configSections&gt;. The given provider &apos;{1}&apos; is directly or indirectly circular referencing itself through the fallbackProvider attributes..
        /// </summary>
        internal static string CircularReferenceInLoggingSection {
            get {
                return ResourceManager.GetString("CircularReferenceInLoggingSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} with name &apos;{1}&apos; has already been initialized..
        /// </summary>
        internal static string DuplicateLoggingProviderInConfig {
            get {
                return ResourceManager.GetString("DuplicateLoggingProviderInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty or missing &apos;{0}&apos; property in provider {1} in config file..
        /// </summary>
        internal static string EmptyOrMissingPropertyInConfiguration {
            get {
                return ResourceManager.GetString("EmptyOrMissingPropertyInConfiguration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The event could not be logged with the {0}..
        /// </summary>
        internal static string EventCouldNotBeLoggedWithX {
            get {
                return ResourceManager.GetString("EventCouldNotBeLoggedWithX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error in the &apos;{0}&apos; section of the the configuration file. The given {1} with name &apos;{2}&apos; has a &apos;fallbackProvider&apos; property with a value of &apos;{3}&apos;. No provider with that name could be found. The given fallbackProvider must be an item in the list of logging providers. Please check the configuration file for errors..
        /// </summary>
        internal static string InvalidFallbackProviderPropertyInConfig {
            get {
                return ResourceManager.GetString("InvalidFallbackProviderPropertyInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Logger hasn&apos;t been configured properly. Please register the logger as &lt;section&gt; in the &lt;configSections&gt; of your configurations file as follows: &lt;configSections&gt;&lt;section name=&quot;logging&quot; type=&quot;{0}, {1}&quot; allowDefinition=&quot;MachineToApplication&quot; /&gt;&lt;/configSections&gt;..
        /// </summary>
        internal static string LoggingSectionMissingFromConfigSettings {
            get {
                return ResourceManager.GetString("LoggingSectionMissingFromConfigSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty or missing connectionStringName attribute in provider &apos;{0}&apos; in config file..
        /// </summary>
        internal static string MissingConnectionStringAttribute {
            get {
                return ResourceManager.GetString("MissingConnectionStringAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing connection string &apos;{0}&apos; in &lt;connectionStrings&gt; section of the config file..
        /// </summary>
        internal static string MissingConnectionStringInConfig {
            get {
                return ResourceManager.GetString("MissingConnectionStringInConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No default Logging provider was found in the &lt;{0}&gt; section of the the configuration file or the &lt;{0}&gt; section was missing. Please provide a default provider as follows: &lt;{0} defaultProvider=&quot;[NameOfYourDefaultProvider]&quot;&gt;&lt;add name=&quot;[NameOfYourDefaultProvider]&quot; type=&quot;[ProviderType]&quot; /&gt;&lt;/{0}&gt;..
        /// </summary>
        internal static string NoDefaultLoggingProviderFound {
            get {
                return ResourceManager.GetString("NoDefaultLoggingProviderFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider parameter must be of type {0}..
        /// </summary>
        internal static string ProviderParameterMustBeOfTypeX {
            get {
                return ResourceManager.GetString("ProviderParameterMustBeOfTypeX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The section &apos;{0}&apos; in the configuration&apos;s &lt;configSections&gt; is not of type {1} but of type {2}..
        /// </summary>
        internal static string SectionIsNotOfCorrectType {
            get {
                return ResourceManager.GetString("SectionIsNotOfCorrectType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to he configuration for provider &apos;{0}&apos; contains the unrecognized attribute with name &apos;{1}&apos;..
        /// </summary>
        internal static string UnrecognizedAttributeInProviderConfiguration {
            get {
                return ResourceManager.GetString("UnrecognizedAttributeInProviderConfiguration", resourceCulture);
            }
        }
    }
}
