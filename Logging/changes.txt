Version [Version Number] ([Friendly Version Number]) [Release Date]

Version vNext
	General description:

	Code changes:
	
    Bug fixes:
        -XmlFileLoggingProvider did not log the exception type. Work item 7531.
        -Logging events without an exception to the SqlLoggingProvider and AspNetSqlLoggingProvider failed. 
         Work item 7534.
        -Several methods in the public API did not check arguments for null. Work item 7533.
    

Version 1.3.0.10246 (1.3) 2010-09-03
	General description:
	    This release has some great usability improvements. First of all the new XmlFileLoggingProvider has
	    been added to allow writing information to the file system in an XML format. Besides this, all loggers
	    now allow to be created using code-based configuration. This means that the you can use the library
	    without using the static Logger class and without having to configure it in the application 
	    configuration file. Next, the AspNetSqlLoggingProvider now allows to log name of the currently logged
	    in user, without needing the System.Web.Security.Membership. Last but not least, all loggers now
	    support the logging of exceptions with multiple inner exceptions, which is will be a very common
	    scenario from .NET 4.0 and up.
	
	Code changes:
	    -The AspNetExceptionLoggingModule will now hook up to the AppDomain.UnhandledException event to log
	     any fatal exceptions that might take the AppDomain down.
	    -Added a base class FileLoggingProviderBase that acts as base class for logging to a file.
	    -A new XmlFileLoggingProvider has been added. Work item 6006.
		-The library is now able to handle exceptions with multiple inner exceptions. Work item 4028
		 When an Exception contains a public 'InnerExceptions' property (such as both the .NET 4.0 
		 System.AggregateException and CuttingEdge.Logging.CompositeException contain), the framework will use
		 this property instead of the InnerException property. The SqlLoggingProvider and
		 AspNetSqlLoggingProvider will store all inner exceptions in the database. The MailLoggingProvider and 
		 WindowsEventLogLoggingProvider will display information about the inner exceptions in their output by
		 using the exception's ToString() method.
		-SmtpClient is now disposed when running inside .NET 4.0 or higher. Work item 6133.
		-The API of the provided logging provider classes is now changed in such a way that code-based 
		 configuration becomes possible. This means that the logging providers now support optional 
		 constructors that allow a provider to be completely initialized, without the need to call 
		 Initialize(string, NameValueCollection). Work item 5143.
		-AspNetSqlLoggingProvider now uses HttpContext.User.Identity.Name and IPrincipal.Identity.Name for 
		 retrieving the current logged-on user name, instead of using the System.Web.Security.Membership.
		 This makes the usage of this logger more flexible and improves performance. Work item 6092.
		-MailLoggingProvider.BuildMailMessageSubject refactored. Useless use of StringBuilder removed. This
		 improves performance.


Version 1.2.2.10128 (1.2.2) 2010-05-08
	General description:
		This release fixes a single bug in the MailLoggingProvider. The bug prevented the provider from 
		logging when either the message or the source of the LogEntry contained a new line character.
	
	Bug fixes:
		-A bug in the MailLoggingProvider prevented the provider from logging (thus sending a mail) when 
		 either the message or the source of the LogEntry contained a new line character. This is fixed by 
		 removing new line characters from message and source when bulding the mail subject and by validating 
		 during initialization whether the subjectFormatString contains a new line character. Work item 6078.


Version 1.2.1.10097 (1.2.1) 2010-04-07
	General description:
		The 1.2.0.10042 contained a critical bug that caused loading of the library to fail in a web 
		environment.
	
	Bug fixes:
		-Library could not be used in web environment. ArgumentException with message "exePath must be 
		specified when not running inside a stand alone exe" was thrown.
		 
	Code changes:
		-Reevaluated the use of FxCop and fixed some by FxCop reported issues in the code or added the 
		 SuppressMessageAttribute to the code. Originally these excludes were added in the FxCop file, but 
		 adding the attributes to code is more maintainable and discoverable.


Version 1.2.0.10042 (1.2) 2010-02-11
	General description:
		This release has one small bug fix and several new features. The biggest new features are the ability
		to use an alternatively named configuration section and the addition of the TerminatorLoggingProvider
		and CompositeLoggingProvider.
	
	Bug fixes:
		-Exception message contained invalid example configuration.
		 The exception thrown in the situation where the <logging> section was missing or didn't contain a
		 'defaultProvider' attribute, contained an example configuration that was invalid. The <providers>
		 tag was missing.
	
	Code changes:
		-Configuration can now use an alternatively named configuration section name for work item 5109.
		-The Obsolete attribute of the LoggerWrapper class was removed from the library.
		-A new TerminatorLoggingProvider added for work item 4845.
		-A new CompositeLoggingProvider added for work item 4844.
		 Some internal changes had to be made to the Logger and LoggingProviderBase to make this possible.
		 The static Logger facade checked the configured providers for circular references during 
		 initialization to prevent stack overflows when providers logged to their fallback provider. The 
		 CompositeLoggingProvider allows referencing multiple providers and it was important to be able to
		 also check these references during initialization. To achieve this, two internal virtual methods were
		 added to the LoggingProviderBase class and the circular reference checking code in the Logger class
		 was refactored and extracted to it's own class: CircularReferenceFinder.
		-A new CompositeException was added for the CompositeLoggingProvider (work item 4844).
		 The CompositeLoggingProvider can log to multiple providers and logging to other providers will
		 continue, even when a providers failed. This means that this could lead to multiple failing providers.
		 To be able to throw an exception that contains multiple inner exceptions, the new CompositeException
		 was created. Its no coincidence that this exception looks a lot like the AggregateException of
		  .NET 4.0. We can't however use AggregateException for two reasons:
		     1. .NET 4.0 is currently still in beta.
		     2. CuttingEdge.Logging must stay compatible with .NET 2.0 for some time to come.
		 By copying the AggregateException API we'll be able to let CompositeException inherit from 
		 AggregateException in a later release. This way a future version of CompositeLoggingProvider will be
		 able to throw an AggregateException while not introducing a breaking change in the library :-).

	Changes to project and solutions:
		-New Common.Logging.CuttingEdge and Common.Logging.CuttingEdge.Tests.Unit projects added. The
		 Common.Logging.CuttingEdge project provides an adapter for the Common.Logging infrastructure (CLI). 
		 The CLI is a facade around logging frameworks with an API close to that of log4net.
		-changes.txt and licence.txt moved up from the CuttingEdge.Logging library directory to the solution 
		 directory and added to the SolutionItems folder.
		-Settings.StyleCop file was missing from Tests.Unit project directory in source control. 
		 StyleCop would report false errors because of this.
		-Global Settings.StyleCop and Logging.FxCop files are now added to a new solution folder called
		 SolutionItems. This makes them more visible to developers. Settings.StyleCop files in sub
		 directories however, are not included.
		-The Element Ordering Rule SA1204 'StaticElementsMustAppearBeforeInstanceElements' was removed from
		 the global Settings.StyleCop file. The rule lead to less readable code, because the rule made it
		 impossible to put two methods vertically close, when one method called the other.
		

Version 1.1.5.0 (1.1.5) 2009-11-30
	General description:
		Some minor bug fixes were fixed for this release, project code was cleaned up, and unit testing library
		was almost completely rewritten. 
	
	Bug fixes:
		-When configuring an provider with no default constructor the thrown exception was not very descriptive.
		-SqlLoggingProvider and AspNetSqlLoggingProvider threw NullReferenceException (WorkItem 4763)
		-Logger threw TypeLoadException when invalid value was set in type attribute (WorkItem 4762)
		-DebugLoggingProvider did not log in release builds. (WorkItem 4721)
		 The logger called the static Trace.Write method which was marked with the ConditionalAttribute.
		-Fixed a typo in the Obsolete attribute of the LoggerWrapper class.
		-Fixed one of the exception messages that was thrown in case the logging provider failed to initialize.
		 The message incorrectly referred to an error in the <configSections> section.
	
	Code changes:
		-Several typo's in code comments and XML comments fixed.
		-A lot of refactoring done, such as:
			-Code in CuttingEdge.Logging assembly cleaned up.
			-SR (String resources) class now uses more convenient format methods instead of static fields.
			 By using methods, code coverage (NCover) can signal which resource messages aren't used.
			-Unit testing library almost completely rewritten. A lot of tests were badly named or tested too
			 much. Many tests were added to achieve better coverage percentage.
		-The Obsolete attribute on the LoggerWrapper class is now flagged as compile error. The LoggerWrapper
		 will be removed in a later release.
	
	Changes to project and solutions:
		-New project CuttingEdge.Logging.Tests.Integration added. This test project needs a SQL server database
		 to test the SqlLoggingProvider and AspNetSqlLoggingProvider.
		-Project CuttingEdge.Logging.Tests.Common added and AppDomain sand boxing classes moved to this library.
		-Project CuttingEdge.Logging.UnitTests is renamed to CuttingEdge.Logging.Tests.Unit.
		-InternalsVisibleToAttribute defined in CuttingEdge.Logging assembly (debug mode only) to allow
		 better Unit Testing.
		-'Treat warnings as errors' is now selected in project settings.
		-StyleCop.Settings file is moved to solution folder. Unit Test project overwrites some settings.
		-TRACE flag is now on in release builds
		

Version 1.1.0.0 (1.1) 2009-03-15
	General description:
		This new release fixes two bugs and adds a new provider: the MailLoggingProvider.

	Bug fixes:
		-Dependency with the type ‘System.Web.Configuration.ProvidersHelper’ removed. There were two problems
		 it’s use:
		 1. The used 'InstantiateProvider' method throws exceptions without specifying a possible inner
		    exception (see the bug report on 
		    http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=411215 for more 
		    information).
		 2. Use of the type caused the to the loading of the System.Web assembly and the check of ASP.NET 
		    hosting permissions, while the CuttingEdge.Logging framework is a general framework that could
		    also be used in non-web based environments.
		-WindowsEventLogLoggingProvider now also logs the severity of the event to the event log. Two new unit
		 tests added to check the format of that logged message.
	
	Code changes:
		-A new MailLoggingProvider has been added. It's a simple provider that uses the <system.net> 
		 configuration from the application configuration file to send events by mail.
		-A LoggerExtensions class added containing extension methods for the ILogger interface. These
		 extension method replace the LoggerWrapper class which is now marked as obsolete.
		 
	Changes to project and solutions:
		-Reference to System.Core (.NET 3.5) added. Officially, the project is now dependent on .NET 3.5, but 
		 it will still run on .NET 2.0. When adding the assembly to a .NET 2.0 project just ignore
		 the warning by choosing "Yes".


Version 1.0.0.0 (1.0) 2008-11-23
	General description:
		Initial release.